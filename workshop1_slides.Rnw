\documentclass[l0pt]{beamer}

\usetheme{Rochester}
\usecolortheme{seagull}
\setbeamercovered{transparent} % https://www.sharelatex.com/blog/2013/08/20/beamer-series-pt4.html

\usepackage{color} % https://en.wikibooks.org/wiki/LaTeX/Colors#Predefined_colors
\usepackage{hyperref}
\usepackage{url}
\usepackage{graphicx}
\graphicspath{ {figure/}{images/} }

\definecolor{keyidea_bk}{rgb}{0.74, 0.83, 0.9}
\definecolor{keyidea_tx}{rgb}{0.0, 0.28, 0.67}
\definecolor{seealso_bk}{rgb}{0.96, 0.73, 1.0}
\definecolor{seealso_tx}{rgb}{0.38, 0.25, 0.32}
\definecolor{learnmore_bk}{rgb}{0.52, 0.73, 0.4}
\definecolor{learnmore_tx}{rgb}{0.0, 0.27, 0.13}
\definecolor{wwtd_bk}{rgb}{0.98, 0.93, 0.37}
\definecolor{wwtd_tx}{rgb}{1.0, 0.56, 0.0}
\definecolor{hwydt_bk}{rgb}{1.0, 0.72, 0.77}
\definecolor{hwydt_tx}{rgb}{0.79, 0.08, 0.48}

% \definecolor{magenta(dye)}{rgb}{0.79, 0.08, 0.48}
% \definecolor{maize}{rgb}{0.98, 0.93, 0.37}
% \definecolor{portlandorange}{rgb}{1.0, 0.35, 0.21}
% \definecolor{princetonorange}{rgb}{1.0, 0.56, 0.0}
% \definecolor{fluorescentorange}{rgb}{1.0, 0.75, 0.0}
% \definecolor{flame}{rgb}{0.89, 0.35, 0.13}
% \definecolor{carminepink}{rgb}{0.92, 0.3, 0.26}
% \definecolor{cherryblossompink}{rgb}{1.0, 0.72, 0.77}
% \definecolor{forestgreen(traditional)}{rgb}{0.0, 0.27, 0.13}
% \definecolor{electriclavender}{rgb}{0.96, 0.73, 1.0}
% \definecolor{frenchlilac}{rgb}{0.53, 0.38, 0.56}
% \definecolor{eggplant}{rgb}{0.38, 0.25, 0.32}
% \definecolor{uclagold}{rgb}{1.0, 0.7, 0.0}
% \definecolor{magicmint}{rgb}{0.67, 0.94, 0.82}
% \definecolor{moonstoneblue}{rgb}{0.45, 0.66, 0.76}
% \definecolor{non-photoblue}{rgb}{0.64, 0.87, 0.93}
% \definecolor{oldmauve}{rgb}{0.4, 0.19, 0.28}
% \definecolor{oldrose}{rgb}{0.75, 0.5, 0.51}
% \definecolor{paleaqua}{rgb}{0.74, 0.83, 0.9}
% \definecolor{pakistangreen}{rgb}{0.0, 0.4, 0.0}
% \definecolor{parisgreen}{rgb}{0.31, 0.78, 0.47}
% \definecolor{pastelgreen}{rgb}{0.47, 0.87, 0.47}
% \definecolor{dollarbill}{rgb}{0.52, 0.73, 0.4}
% \definecolor{pistachio}{rgb}{0.58, 0.77, 0.45}
% \definecolor{portlandorange}{rgb}{1.0, 0.35, 0.21}
% \definecolor{princetonorange}{rgb}{1.0, 0.56, 0.0}
% \definecolor{sinopia}{rgb}{0.8, 0.25, 0.04}
% \definecolor{sangria}{rgb}{0.57, 0.0, 0.04}
% \definecolor{amber}{rgb}{1.0, 0.75, 0.0}
% \definecolor{mikadoyellow}{rgb}{1.0, 0.77, 0.05}
% \definecolor{lightgoldenrodyellow}{rgb}{0.98, 0.98, 0.82}
	
\newcommand*\keyidea[1]{
\setbeamercovered{invisible}
\pause
  \begin{center}
  \colorbox{keyidea_bk}{\parbox{0.9\textwidth}{{\color{keyidea_tx}\textbf{Key idea: }#1}}}
  \end{center}
}

\newcommand*\seealso[1]{
\setbeamercovered{invisible}
\pause
  \begin{center}
  \colorbox{seealso_bk}{\parbox{0.9\textwidth}{{\color{seealso_tx}\textbf{See also: }#1}}}
  \end{center}
}

\newcommand*\learnmore[1]{
\setbeamercovered{invisible}
\pause
  \begin{center}
  \colorbox{learnmore_bk}{\parbox{0.9\textwidth}{{\color{learnmore_tx}\textbf{Learn more: }#1}}}
  \end{center}
}

\newcommand*\hwydt[1]{
  \begin{center}
  \colorbox{hwydt_bk}{\parbox{0.9\textwidth}{{\color{hwydt_tx}\textbf{How would you do this? }#1}}}
  \end{center}
}

\newcommand*\wwtd[1]{
  \begin{center}
  \colorbox{wwtd_bk}{\parbox{0.9\textwidth}{{\color{wwtd_tx}\textbf{What will this do? }#1}}}
  \end{center}
}


\begin{document}

\title[R Workshop 1]{Intro to R}

\date[15/05/2016]{May 15th, 2016}
\author[R. Hartman]{Rose Hartman}
\institute[CASE]{Office of the Vice President for Research and Innovation \\ Center for Assessment Statistics \& Evaluation}

\maketitle

<<setup, include=FALSE, echo=FALSE>>=
library("knitr")
opts_chunk$set(fig.align='center',fig.show='hold',size='footnotesize')
@

% very important to use option [fragile] for frames containing code output!

% -------------------------------------------------------------
\begin{frame}[fragile]{Introduction}

\begin{center}
Hi, I'm Rose.
\end{center}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{General R resources}

\begin{itemize}
  	\item<1-> swirl\\ \url{https://github.com/swirldev/swirl}
  	\item<2-> R for cats\\ \url{http://rforcats.net/}
		\item<3-> UCLA R materials\\ \url{http://www.ats.ucla.edu/stat/r/sk/}
		\item<4-> Jenny Bryan's R class\\ \url{http://stat545.com/}
		\item<5-> Advanced R by Hadley Wickham\\ \url{http://adv-r.had.co.nz/}
    \item<6-> R Club!\\ \url{http:blogs.uoregon.edu/rclub}
	\end{itemize}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Welcome to the Wonderful World of R}

\tableofcontents[]

\end{frame}
% -------------------------------------------------------------

\section{R Basics}
\subsection{Overview of R}
\setbeamercovered{transparent}
% -------------------------------------------------------------
\begin{frame}[fragile]{How does R compare to other ways of doing data analysis?}

\begin{itemize}
    \item<1-> 100\% scripts (100\% reproducible): data cleaning, transforming, analyzing, presenting, even writing and interpretation all in one place
    \item<2-> free (open)
    \item<3-> not a spreadsheet environment --- this changes the way you think about your data
    \item<4-> handles pretty much anything you might want to do to your data (so no need to switch between environments), and is growing every day
    \item<5-> modular (you can't download the whole thing once and be done)
  \end{itemize}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{How do you learn R?}

\begin{itemize}
    \item<2-> It's a language. You learn by using it!
    \item<3-> My recommendation: \\ Figure out something you want to do in R (a real, live data problem you have) and work on that, rather than reading about it in the abstract. You won't learn R by having someone explain it to you, only by doing it yourself. Best case scenario: Find a bunch of problems to work on in R, and a group to work on them with, so you get experience with a broad range of applications.
  \end{itemize}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{This workshop}

\begin{itemize}
   \item<1-> Focus on common stumbling blocks for people who try to learn R on their own. I want to take down barriers, so you'll be well placed to continue practicing R back in your natural habitat. 
    \item<2-> Lots of practice, and we'll return to key concepts several times. 
    \item<3-> For those of you who are learning/psych geeks...
    \begin{itemize}
	    \item<4-> interleaved training and progressive alignment
	    \item<5-> realistic practice problems from the two perspectives you're most likely to encounter in real life
	    \item<6-> consistent color-coding of different types of information 
	    \end{itemize}
  \end{itemize}
  
<< notes_this-workshop, echo=FALSE>>=
# I'm trying to maximize your ability to generalize what you learn here to new circumstances you'll encounter, so I'll be harnessing the power of interleaved training and progressive alignment. 
# I'll ask you to tackle realistic practice problems from the two perspectives you'll most likely to encounter in real life: I have an idea in my head and I need to turn it into code, and I've got some code here and I need to figure out what it does.
# You'll also notice consistent color-coding of different types of information throughout to help you allocate your attention in support of your learning goals, and to facilitate appropriate comparison across situations.
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{}

Keep an eye out for...
\pause
\hwydt{}
\pause
\wwtd{}
\learnmore{resources to check out}
\keyidea{the big ideas you need to hold on to}
\seealso{other functions or packages that do a similar thing}

\end{frame}
% -------------------------------------------------------------

\subsection{R as a calculator}
% -------------------------------------------------------------
\begin{frame}[fragile]{Overview}
\tableofcontents[ 
    currentsubsection, 
    hideothersubsections, 
    sectionstyle=show/shaded, 
    subsectionstyle=show/shaded, 
    ] 
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Let's get started!}

\begin{center}
\includegraphics[width=\textwidth]{rstudio.png}
\end{center}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Let's get started!}

<<  >>=
3 + 4
112/2
sqrt(5)
@

\keyidea{Functions look like do.something(to.this)}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Functions in R}

<<  >>=
sum(3, 4)
log(1/2)
sin(0)
sin(1)
sin(pi)
?log
@

\keyidea{Pull up the help documentation for a function by ?its.name}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Creating objects in R}

<<  >>=
x <- 3
x
@

\keyidea{If you save something as an object, you can get the value by just calling the object name.}

\pause 

<<  >>=
x + 4
y <- 4
@
Check out your environment in R Studio to see what objects you have currently. You can delete an object with rm(). For example:
<<>>=
rm(x)
@
\pause
Let's make it again, so we can keep working with it.
<<  >>=
x <- 3
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Functions}

\begin{quote}
To understand computations in R, two slogans are helpful:\\
Everything that exists is an object.\\
Everything that happens is a function call.\\
- John Chambers
\end{quote}
\vfill

From \url{http://adv-r.had.co.nz/Functions.html}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Creating objects in R}

\wwtd{}
<<  >>=
x + y
@
\pause
Let's assign a value to x again.
<<  >>=
x <- 1
@

What is the value of x?
\keyidea{When you reuse an object name, it overwrites the old object (with no warning!)}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Creating objects in R}

<< >>=
variablex<- 3
variablex<-3
variablex <-
  3
variable x <- 3
@

\keyidea{White space usually doesn't matter, except in the middle of a name}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Creating objects in R}

You can name an object pretty much anything you want (as long as there's no white space).
<<  >>=
sqrt_5 <- sqrt(5)
pi <- sqrt(5)
@

\keyidea{Actually, there are some names you can't use (they're reserved).}

<<>>=
favorite_phrase <- "woo hooo!"
@
\keyidea{Strings need to be surrounded by quotes. If there are no quotes around something, it's treated as a name.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{A note about what R needs from you}

\begin{quote}
Implicit contract with the computer / scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Get better at typing. \\
- Jenny Bryan
\end{quote}
\vfill

From \url{http://stat545-ubc.github.io/block002_hello-r-workspace-wd-project.html}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section: Functions}
\keyidea{Functions look like do.something(to.this)}
\keyidea{Pull up the help documentation for a function by ?its.name}
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section: Saving objects}

\keyidea{If you save something as an object, you can get the value by just calling the object name.}
\keyidea{When you reuse an object name, it overwrites the old object (with no warning!)}
\keyidea{White space usually doesn't matter, except in the middle of a name}
\keyidea{There are some names you can't use (they're reserved).}
\keyidea{Strings need to be surrounded by quotes. If there are no quotes around something, it's treated as a name.}

\end{frame}
% -------------------------------------------------------------

\subsection{Making and using vectors}
% -------------------------------------------------------------
\begin{frame}[fragile]{Overview}
\tableofcontents[ 
    currentsubsection, 
    hideothersubsections, 
    sectionstyle=show/shaded, 
    subsectionstyle=show/shaded, 
    ] 
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

<< eval=TRUE >>=
x <- 1:10
@

\wwtd{}
<<>>=
x + 4
@
\keyidea{When you do something to a vector, usually R does it to each element of the vector.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

<<>>=
x <- c(1,2,10)
y <- c(3,5,7)
@
\wwtd{}
<<>>=
x + y
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

<<>>=
seq(from=1, to=10, by=1)
@
\wwtd{}
<<>>=
seq(from=1, to=10, by=2)
@


\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

Try this:
<<>>=
seq(1, 10, by=1)
seq(1, 10)
@

\wwtd{}

<<>>=
seq(10, 1)
seq(5)
@
\keyidea{Some arguments in functions have defaults}
\keyidea{You can (but don't have to) specify the names of arguments. I recommend doing it.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

\hwydt{Find out the defaults for seq()}
\pause
<<>>=
?seq
@
\learnmore{Use ? when you know the exact name of the function you want, you just want to pull up the help documentation for it.}
\learnmore{Use ?? when you think you've got a function for what you need, you just can't remember its exact name.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

\hwydt{\\ Generate this vector:  10, 20, 30, 40, 50}
\pause
<<>>=
seq(from=10, to=50, by=10)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

Try this:
<<>>=
rep(3, times=1)
@

\wwtd{}
<<>>=
rep(favorite_phrase, 3)
c(favorite_phrase, 1:5)
@
\pause
<<>>=
x <- c(favorite_phrase, 1:5)
mode(x)
@
\keyidea{You can't combine different types of items in the same vector. If you try, R will coerce them to be the same.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{vectors}

\hwydt{\\ Generate this vector: 10, 10, 20, 20, 30, 30 \\ Generate this vector: 10, 20, 30, 10, 20, 30}
\pause
<<>>=
c(10, 10, 20, 20, 30, 30)
c(10, 20, 30, 10, 20, 30)
rep(seq(10, 30, by=10), times=2)
rep(seq(10, 30, by=10), each=2)
sort(rep(seq(10, 30, by=10), 2))
@
\keyidea{Applying functions sequentially. Send the output of one function as the input to the next.}
\keyidea{There's more than one correct solution! That's usually the case.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section}

\keyidea{When you do something to a vector, usually R does it to each element of the vector.}
\keyidea{Some arguments in functions have defaults}
\keyidea{You can (but don't have to) specify the names of arguments. I recommend doing it.}
\keyidea{Applying functions sequentially. Send the output of one function as the input to the next.}
\keyidea{There's more than one correct solution! That's usually the case.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Playing with vectors}

\wwtd{}
<<>>=
log(seq(from=0, to=10, length.out=100))
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Playing with vectors}

Try this:
<<>>=
cor(x,y)
plot(y ~ x)
@
\hwydt{Find out the defaults for plot()}
\wwtd{}
<<>>=
plot(x ~ y)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Playing with vectors}

Try this:
<<>>=
rnorm(10)
@

\hwydt{Find out the defaults for rnorm()}
\hwydt{\\ Generate one example of a random IQ score (mean of 100, standard deviation of 15).}
\pause
<<>>=
rnorm(1, mean=100, sd=15)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Playing with vectors}

\wwtd{}
<<>>=
hist(rnorm(100, mean=50, sd=5))
@

\end{frame}
% -------------------------------------------------------------


% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}

\hwydt{\\ Generate this plot (showing the value of sin from -5 to 5).}
\begin{center}
\includegraphics[width=.7\textwidth]{sinx.png}
\end{center}
\pause
<<>>=
x <- seq(from=-5, to=5, by=.1)
plot(sin(x) ~ x)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}

\hwydt{Generate this plot (showing random scatter plot, random x and random y)}
\begin{center}
\includegraphics[width=.65\textwidth]{scatternull.png}
\end{center}
\pause
<<>>=
plot(rnorm(100) ~ rnorm(100), xlab="Predictor", ylab="Outcome", 
     main="My lovely null results")
@

\end{frame}
% -------------------------------------------------------------

\subsection{Upgrading from vectors to data frames!}
% -------------------------------------------------------------
\begin{frame}[fragile]{Overview}
\tableofcontents[ 
    currentsubsection, 
    hideothersubsections, 
    sectionstyle=show/shaded, 
    subsectionstyle=show/shaded, 
    ] 
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}
Try this:
<<>>=
x <- data.frame(id=1:10, scores = rnorm(10))
x
str(x)
@
\keyidea{Use str(something) to learn about its structure.}
\pause
<<>>=
head(x)
tail(x)
View(x)
@
\keyidea{Use head(), tail() and View() to peak at a data frame.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}

<<>>=
conditions <- rep(c("condition 1", "condition 2", "condition 3"), 
                  each=5)
@

\seealso{gl() for generating levels of a categorical variable}

<<>>=
scores <- runif(15, min=1, max=10)
@

\hwydt{\\ Learn about a function you don't recognize: runif()}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}

<<>>=
my_data <- data.frame(conditions, scores)
str(my_data)
@
\keyidea{You can combine different types of variables in the same data frame.}
\pause
Try this:
<<>>=
my_data$scores
@
\keyidea{Each column in a data frame is a vector.}
\keyidea{You can refer to one column within a data frame with \$, like dataframe\$columnname.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}
\setbeamercovered{transparent}
Some important things to know about dataframes in R:
\begin{itemize}
  \item<1->Common types of variables: numeric, factor, character, and logical
  \item<2->Dataframes must be rectangular (all columns must have the same number of elements).
  \item<3->Columns have names (i.e. variable names)
  \item<4->Dataframes, like other R objects, can have additional attributes. You can use this to store additional metadata about variables, etc.
\end{itemize}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}
\setbeamercovered{transparent}
Some important things to know about dataframes in R:
\begin{itemize}
  \item<1->Common types of variables: numeric, factor, character, and logical
  \item<2->Dataframes must be rectangular (all columns must have the same number of elements).
  \item<3->Columns have names (i.e. variable names)
  \item<4->Dataframes, like other R objects, can have additional attributes. You can use this to store additional metadata about variables, etc.
\end{itemize}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}

There are a bunch of data sets built-in to R:
<<>>=
head(iris)
str(iris)
data()
colnames(iris)
summary(iris)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section}

\keyidea{Use str(something) to learn about its structure.}
\keyidea{Use head(), tail() and View() to peak at a data frame.}
\keyidea{You can combine different types of variables in the same data frame.}
\keyidea{Each column in a data frame is a vector.}
\keyidea{You can refer to one column within a data frame with \$, like dataframe\$columnname.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}

\hwydt{\\ Generate this plot (plot showing condition on the x-axis and score on the y-axis from my\_data)}
\begin{center}
\includegraphics[width=.6\textwidth]{boxplot.png}
\end{center}
\pause
<<>>=
plot(scores ~ conditions, data=my_data, xlab=NULL, 
     main="Some made-up data")
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Data frames}
Let's take another look at that code:
<<>>=
plot(scores ~ conditions, data=my_data, xlab=NULL, 
     main="Some made-up data")
@
\keyidea{Some functions, like plot(), allow you to specify a dataframe, and then you can use the bare column names within the function.}
\keyidea{Some functions, like plot(), are clever and will change their behavior depending on the object you give them.}

\end{frame}
% -------------------------------------------------------------

\subsection{installing a package, reading in a data set}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Overview}
\tableofcontents[ 
    currentsubsection, 
    hideothersubsections, 
    sectionstyle=show/shaded, 
    subsectionstyle=show/shaded, 
    ] 
\end{frame}
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}

<<>>=
install.packages("haven")
@

\seealso{the foreign package}

<<>>=
library("haven")
@
\seealso{require() for loading an installed package}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Learning about packages}
<<>>=
help(package="haven")
@
\keyidea{To pull up all of the documentation for a specific package, you can use the help() command. It's like ? but more flexible.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Functions in packages}

<<>>=
?read_sav
@

\seealso{foreign::read.spss()}
\keyidea{To refer to a specific function in a package, use package.name::function.name()}
\pause
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{A note about packages}
\setbeamercovered{transparent}

\begin{itemize}
  \item<1->When you run install.packages(), R contacts CRAN to get the package you want, so you need an internet connection for it to work.
  \item<2->You only need to install each package once (and again whenever you want updates for it), and it will be saved on your computer so you can use it offline.
  \item<3->You need to load each package you want to use again in each R session. Why?
\end{itemize}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{A note about packages}
\setbeamercovered{transparent}

\begin{itemize}
  \item<1->Note that different packages can have functions with the same name (e.g. select() is a function in several packages)
  \item<2->packages get updated, and some packages may not continue to work on new versions of R if the package is no longer being supported (this is rare). 
  \item<3->You need to load each package you want to use again in each R session. Why?
\end{itemize}

\seealso{To manage package versions, check out packrat.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section: packages}

\keyidea{To pull up all of the documentation for a specific package, you can use the help() command. It's like ? but more flexible.}
\keyidea{To refer to a specific function in a package, use package.name::function.name()}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}

Does this work for you?
<< echo=FALSE >>=
surveydata <- read_sav("Workshop_Sign_up_Spring2016.sav")
surveydata <- dplyr::select(surveydata, Q5_10:Q5_13, Q4, Q8:Q9_3_TEXT)
write_sav(surveydata, "survey.sav")
@
<<read_sav>>=
atlas <- read_sav("ATLAS.sav")
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}

When R looks for files on your computer, it doesn't search you're whole computer. It only looks in whatever folder (directory) it's currently in. \\
R's current folder is called the "working directory."
\pause
<< getwd >>=
getwd()
@
\pause
If you want R to find something on your computer, you have three options:
\begin{enumerate}
  \item Put the file in R's working directory
  \item Move R's working directory to where ever the file is saved
  \item Specify the file path when you tell R to look for the file
\end{enumerate}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}

Option 1: Put the file in R's working directory.\\
\bigskip
\pause
Option 2: Move R's working directory to where ever the file is saved. \\
For example, if I want to get a file that's saved on my desktop, I can use setwd() to move R's gaze there:
<< setwd >>=
setwd("/Users/TARDIS/Desktop")
@
\bigskip
\pause
Option 3: Specify the file path when you tell R to look for the file.\\
<< >>=
atlas <- read_sav("/Users/TARDIS/Desktop/ATLAS.sav")
@
This doesn't change R's working directory.

\keyidea{To read or save files, you need to know R's working directory and where the files are located on your computer (or where you want them saved).}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}
This is a data set about the efficacy of a strength training self-efficacy intervention on high school student athletes.\\
I have it stored in my working directory, in a folder called "data".
<<>>=
atlas <- read_sav("data/ATLAS.sav")
head(atlas)
str(atlas)
summary(atlas)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}
This is a data set about publicly available data, from OSF: \url{https://osf.io/srgjb/}
<<>>=
osf <- read.csv("data/OSF_data.csv")
head(osf)
str(osf)
summary(osf)
@

\keyidea{Always check your work after reading in a data frame. Use str() and View() or head().}
\pause
<<>>=
osf$X <- NULL
str(osf)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}

This is a file is from the corpus of infant-directed speech I'm currently analyzing.
<<>>=
corpus <- read.table("data/corpus.txt")
@
\keyidea{If you specify a file path with no initial /, it's a relative path, meaning R will look for a folder called that \emph{within} its current working directory.}
\pause
<< read.table >>=
corpus <- read.table("data/corpus.txt", 
                   header=TRUE, 
                   sep="\t", 
                   quote = NULL,
                   row.names = NULL,
                   stringsAsFactors = FALSE)
@
\keyidea{It may take several tries to read in a file correctly, depending on how it's formatted. Keep checking!}
\pause
<<>>=
corpus <- read.delim("data/corpus.txt", stringsAsFactors = FALSE)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Getting your data into R}

\begin{center}
Do you have your own data? Try reading it into R.
\end{center}

\end{frame}
% -------------------------------------------------------------

% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas: Getting your data into R}

\keyidea{To read or save files, you need to know R's working directory and where the files are located on your computer (or where you want them saved).}
\keyidea{If you specify a file path with no initial /, it's a relative path, meaning R will look for a folder called that \emph{within} its current working directory.}
\keyidea{Always check your work after reading in a data frame. Use str() and View() or head().}
\keyidea{It may take several tries to read in a data file correctly, depending on how it's formatted. Keep checking to see if the read-in object looks correct!}

\end{frame}
% -------------------------------------------------------------

\section{Data wrangling}
\subsection{dplyr and tidyr}
% -------------------------------------------------------------
\begin{frame}[fragile]{Overview}
\tableofcontents[ 
    currentsubsection, 
    hideothersubsections, 
    sectionstyle=show/shaded, 
    subsectionstyle=show/shaded, 
    ] 
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Working with data in R}
\setbeamercovered{invisible}
R has some built-in data sets, and there are also often additional data sets included with packages.
Let's install the gapminder package to get those data.
\hwydt{\\ Install a new package called "gapminder"}
\pause
<< gapminder_data >>=
install.packages("gapminder")
library("gapminder")
help(package="gapminder")
@

\vfill
From \url{http://www.gapminder.org/data/}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Working with data in R}

Let's take a look at the gapminder data set:
\pause
<<>>=
head(gapminder)
str(gapminder)
summary(gapminder)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}

As anyone who's conducted a full analysis knows, it's only actually a tiny portion of your analysis time that's spent doing stats. 
The rest is data cleaning / processing / reformatting / wrangling.\\

There are lots of great ways to manipulate data in R (watch for "See also" boxes).
I'm only going to focus on teaching you one of them: dplyr, and its companion tidyr.\\

The reason is that dplyr is specifically designed for exactly what most researchers need: to handle all of the most common data wrangling tasks in a streamlined, intuitive way. 
It's fast and slick, and it integrates beautifullly with great plotting tools, so you can get to the exciting part of your analysis faster.

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}

The dplyr package is a little unusual in that it's not just a collection of functions that you're supposed to throw in with all of the rest of the functions you've got in R; it's designed to work as a cohesive set to meet pretty much all of your data manipulation needs. 
Rather than just having dplyr functions sprinkled throughout a script of yours, you're likely to have dplyr sections within the script, where you use several related functions in a row. \\
It's mostly made up of functions that work like "verbs" for modifying your data.
Also, you also have the option to use pipes if you want, to make your data cleaning steps easier to read (and write).

\learnmore{Here's an introduction to dplyr (with lots of examples!) by Hadley Wickham himself \url{https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html}}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}

<<>>=
install.packages("dplyr", "tidyr")
library("dplyr")
library("tidyr")
help(package="dplyr")
@
Tons of functions!

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
Take some rows from the data frame, according to some rule. \\
For example, let's get all of the Asian countries from gapminder.
<<>>=
?filter
@
\pause
<<>>=
gapminder.asia <- filter(gapminder, continent=="Asia")
@
\keyidea{To test for equality (are these two things the same?), you need to use ==}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
\hwydt{Just pull out the cases with less than average life expectancy}
\pause
<<>>=
filter(gapminder, lifeExp < mean(lifeExp))
@
\keyidea{You can use $>, <, >=, <=$ to express inequalities}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
\hwydt{Just pull out the cases in the Americas with less than average life expectancy}
Hint: Look at the help documentation for dplyr::filter
\pause
<<>>=
filter(gapminder, lifeExp < mean(lifeExp) & continent == "Americas")
@
\keyidea{You can use \& to specify two (or more) logical tests that all need to be met.}

\seealso{base::subset()}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
\hwydt{Just pull out the cases with particularly low (less than 40) or particularly high (greater than 75) life expectancies.}
\pause
<<>>=
filter(gapminder, lifeExp < 40 | lifeExp > 75)
@
\keyidea{You can use $|$ to specify "or" logical tests, where any of them can be met.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
Selecting some of the columns.
<<select>>=
select(gapminder, country, continent, year, lifeExp)
@


\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{tidyr}
\setbeamercovered{invisible}
Converting between long and wide formats.
Use spread() to go wide, and gather() to go long.\\
Let's say we want each row to just be one year and have each country be a column, so we can look at the life expectancy data in wide format.
<<>>=
gapminder.lifeExp <- select(gapminder, 
                            country,  
                            year, 
                            lifeExp)
wide <- spread(gapminder.lifeExp, key=country, lifeExp)
wide
@

\seealso{reshape2::melt and reshape2::cast}
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{tidyr}
\setbeamercovered{invisible}
Converting between long and wide formats.
Use spread() to go wide, and gather() to go long.\\
Now let's bring it back to long format.
<<>>=
long <- gather(wide, 
               key="country", 
               value="lifeExp", 
               Afghanistan:Zimbabwe)
long
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{tidyr}
<< tidyr >>=
help(package="tidyr")
@
Tons of great stuff!
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
But we can do this much more neatly (without creating a lot of temporary objects) by using pipes. 
<< pipes >>=
gapminder %>% 
  select(country, year, lifeExp) %>% 
  spread(key=country, lifeExp)
@

\keyidea{A pipe sends the output of one function to be the first argument in the next function.}
\keyidea{When you use pipes, you omit the first argument of the function after the pipe.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
Doing things to each of the levels of a factor in a data frame.\\
For example, maybe you want the mean population for each country, collapsing across years.
<<>>=
gapminder %>% 
  group_by(country)
@
\pause
<<>>=
gapminder %>% 
  group_by(country) %>% 
  summarize(mean.pop=mean(pop))
@

\seealso{base::by() and psych::describeBy()}
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
\hwydt{\\ Get the min and max GDP per capita for each continent}
\pause
<< group_by >>=
gapminder %>% 
  group_by(continent) %>% 
  summarize(min.gpd=min(gdpPercap), max.gpd=max(gdpPercap))
@
\pause
\wwtd{\\ If you ran summarize() without grouping first}
<<>>=
gapminder %>% 
  summarize(min.gpd=min(gdpPercap), max.gpd=max(gdpPercap))
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
Combining data frames: join operations.
<<>>=
?join
@
left\_join keeps all of the rows in whichever dataframe you list first, and will supplement it with columns from the second dataframe.
\pause
<<>>=
cont.means <- gapminder %>% 
  group_by(continent, year) %>% 
  summarize(cont.gdpPercap=mean(gdpPercap))
gapminder %>% 
  left_join(cont.means, by=c("continent", "year"))
@

\seealso{base::merge()}
\learnmore{\\ \url{http://stat545.com/bit001_dplyr-cheatsheet.html}}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{dplyr}
\setbeamercovered{invisible}
Add new calculated columns.
<<>>=
gapminder %>% 
  mutate(pop.diff=pop - mean(pop), pop.sd=sd(pop), pop.Z=pop.diff/pop.sd)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section}

\keyidea{To test for equality (are these two things the same?), you need to use ==}
\keyidea{You can use $>, <, >=, <=$ to express inequalities}
\keyidea{You can use \& to specify two (or more) logical tests that all need to be met.}
\keyidea{You can use $|$ to specify "or" logical tests, where any of them can be met.}
\keyidea{A pipe sends the output of one function to be the first argument in the next function.}
\keyidea{When you use pipes, you omit the first argument of the function after the pipe.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}
\setbeamercovered{invisible}
\hwydt{\\ For each country at each year, calculate its difference in population from its continent's average population during that year.}
\pause
<<>>=
cont.means <- gapminder %>% 
  group_by(continent, year) %>% 
  summarize(cont.pop=mean(pop))
  
gapminder %>% 
  left_join(cont.means, by=c("continent", "year")) %>% 
  mutate(diff.pop=pop-cont.pop)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}
\setbeamercovered{invisible}
\hwydt{\\ Get the average life expectancy and population over the last 10 years of the data (1997-2007) for each continent.}
\pause
<<>>=
gapminder %>% 
  filter(year >= 1997) %>% 
  group_by(continent) %>% 
  summarize(mean(lifeExp), mean(pop))
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}
\wwtd{\\ Can you understand this code? Use ? to look up functions you don't recognize.}
<<>>=
gapminder %>%
  filter(continent == "Asia") %>%
  select(year, country, lifeExp) %>%
  arrange(year) %>%
  group_by(year) %>%
  filter(min_rank(desc(lifeExp)) < 2 | min_rank(lifeExp) < 2)
@
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge}
\wwtd{\\ Can you understand this code? Use ? to look up functions you don't recognize.}
<<>>=
gapminder %>%
  group_by(continent, country) %>%
  select(country, year, continent, lifeExp) %>%
  mutate(le_delta = lifeExp - lag(lifeExp)) %>%
  summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
  filter(min_rank(worst_le_delta) < 2) %>%
  arrange(worst_le_delta)
@
\end{frame}
% -------------------------------------------------------------


\section{Plotting}
\subsection{ggplot2}
% -------------------------------------------------------------
\begin{frame}[fragile]{Overview}
\tableofcontents[ 
    currentsubsection, 
    hideothersubsections, 
    sectionstyle=show/shaded, 
    subsectionstyle=show/shaded, 
    ] 
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Plotting in R}
Lots of options for plotting in R. 
We've already seen some examples of the base R plotting functions, and they work great. 
The ggplot2 package is different because it's specifically designed with data exploration in mind --- not just what plots you'll need to draw, but what questions you'll need to answer about your data.\\
\bigskip
When might you want to use base plotting, and when might ggplot2 be better?
\learnmore{\\ \url{https://github.com/jennybc/ggplot2-tutorial}}
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
<<ggplot2>>=
install.packages("ggplot2")
library("ggplot2")
?ggplot
@
\learnmore{Lots and lots of example plots with code \\ \url{http://shinyapps.org/apps/RGraphCompendium/index.php} \\ and \url{http://shiny.stat.ubc.ca/r-graph-catalog/}}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
ggolot2 works in layers. The first thing you do is set up the variables you want to plot in ggplot(), then you add layers for the plots you want to draw.
<<>>=
ggplot(gapminder, aes(x=year, y=pop))
@
\keyidea{ggplot() and aes() set up what data will get plotted. Then you tell it how to plot with geoms.}

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
Scatterplot
<< scatter >>=
ggplot(gapminder, aes(x=year, y=pop)) + 
  geom_point()
@
\pause
You can make the points semi-transparent to ameliorate issues from overplotting (alpha=0 is invisible, alpha=1 is full strength):
<<>>=
ggplot(gapminder, aes(x=year, y=pop)) + 
  geom_point(alpha=.3)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
Boxplot
<< box >>=
ggplot(gapminder, aes(x=continent, y=lifeExp)) + 
  geom_boxplot()
@
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
Histogram
<< hist >>=
ggplot(gapminder, aes(x=lifeExp)) + 
  geom_histogram()
@
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
\setbeamercovered{invisible}
Barplot
<< boxplot >>=
ggplot(gapminder, aes(x=continent, y=lifeExp)) + 
  geom_bar()
@
\pause
geom\_barplot is really built for counting up numbers of cases, rather than displaying means (geom\_boxplot is designed for that). 
But you can get a barplot, too, you just need to do some data wrangling first.
\keyidea{You should have your data manipulation (e.g. getting summary stats) done before you try to get ggplot to plot it.}
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
\setbeamercovered{invisible}
Let's plot the mean lifeExp for each continent.
<<>>=
plot.data <- gapminder %>% 
  group_by(continent) %>% 
  summarize(mean.lifeExp=mean(lifeExp), 
            sd=sd(lifeExp), 
            n=n(), 
            se=sd/sqrt(n))

ggplot(plot.data, aes(x=continent, y=mean.lifeExp)) + 
  geom_bar(stat="identity")
@
\pause
Let's add error bars!
<<>>=
ggplot(plot.data, aes(x=continent, y=mean.lifeExp)) + 
  geom_bar(stat="identity") + 
  geom_errorbar(aes(ymax=mean.lifeExp + 2*se, 
                    ymin=mean.lifeExp - 2*se), width = 0.3)
@

\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
\setbeamercovered{invisible}
Adding layers to our scatterplot. \\
geom\_smooth() adds a line of best fit:
<<>>=
ggplot(gapminder, aes(x=year, y=pop)) + 
  geom_point(alpha=.3) + 
  geom_smooth()
@
\keyidea{ggplot works with layers, and you can add as many layers as you like.}
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
\setbeamercovered{invisible}
Line plot
<< line >>=
ggplot(gapminder, aes(x=year, y=pop, group=country)) + 
  geom_line(alpha=.3) 
@
\end{frame}
% -------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2}
\setbeamercovered{invisible}
The fun part! Exploring relationships bewteen several variables at once.\\
Use color= for lines and points and fill= for other shapes. 
<< scatter_color >>=
ggplot(gapminder, aes(x=year, y=gdpPercap, color=continent)) + 
  geom_point(alpha=.6) 

ggplot(gapminder, aes(x=year, y=gdpPercap, 
                      color=continent, fill=continent)) + 
  geom_point(alpha=.6) + 
  geom_smooth()
@

<< hist_color >>=
ggplot(gapminder, aes(x=lifeExp, fill=continent)) + 
  geom_histogram() 
@

\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2: axes}
You can control a lot about how your plots look with theme().
<<>>=
?theme
@
\pause 
There are a few sensible theme bundlles available as well:
<< theme >>=
ggplot(gapminder, aes(x=year, y=gdpPercap, 
                      color=continent, fill=continent)) + 
  geom_point(alpha=.6) + 
  geom_smooth() + 
  theme_bw()
@

\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2: axes}
<<  >>=
ggplot(gapminder, aes(x=year, y=gdpPercap, 
                      color=continent, fill=continent)) + 
  geom_point(alpha=.6, show.legend = FALSE) + 
  geom_smooth(show.legend = FALSE) + 
  theme(axis.title.x=element_blank(), 
        axis.text.x =element_text(angle=90)) + 
  xlim(c(1970, 2007)) + 
  labs(title="GDP per capita over time")
@

\keyidea{There are LOTS of different ways to control the look of your plots. This feels overwhelming at first, but hopefully you'll appreciate the flexibility later.}

\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2: axes}
log transform an axis scale 
<< log_trans >>=
ggplot(gapminder, aes(x=year, y=gdpPercap, 
                      color=continent, fill=continent)) + 
  geom_point(alpha=.6) + 
  geom_smooth() + 
  scale_y_log10()
@
\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2: axes}

Changing the order a factor displays in.\\
Option 1: organize the levels of a factor based on some stat in the dataset
<<  >>=
ggplot(plot.data, aes(y=continent, x=mean.lifeExp)) + 
  geom_point() + 
  geom_errorbarh(aes(xmax=mean.lifeExp + 2*se, xmin=mean.lifeExp - 2*se), height=.1 )
@
\pause
<<  >>=
ggplot(plot.data, aes(y=reorder(continent, mean.lifeExp), x=mean.lifeExp)) + 
  geom_point() + 
  geom_errorbarh(aes(xmax=mean.lifeExp + 2*se, xmin=mean.lifeExp - 2*se), height=.1 )
@
\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2: axes}
<<  >>=
ggplot(plot.data, aes(x=reorder(continent, mean.lifeExp), y=mean.lifeExp)) + 
  geom_point() + 
  geom_errorbar(aes(xmax=mean.lifeExp + 2*se, xmin=mean.lifeExp - 2*se), height=.1 ) +
  coord_flip()
@
\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{ggplot2: axes}

Changing the order a factor displays in.\\
Option 2: Change the order of the factor levels right in the data frame itself
<<  >>=
levels(plot.data$continent)
plot.data$continent <- factor(plot.data$continent, 
                              levels=c("Americas", "Europe", "Africa", "Asia", "Oceania"))
@
\pause
<<  >>=
ggplot(plot.data, aes(y=continent, x=mean.lifeExp)) + 
  geom_point() + 
  geom_errorbarh(aes(xmax=mean.lifeExp + 2*se, xmin=mean.lifeExp - 2*se), height=.1 )
@
\end{frame}
% -----------------------------------------------------------

% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge: ggplot2}

Use this data frame (one of the ones that comes with ggplot2):
<<>>=
head(diamonds)
str(diamonds)
@

\hwydt{\\ Make a plot showing the relationship between log(carat) and log(price) of diamonds. Add a line that shows the linear best fit (i.e. a regression line)}
\pause
<< >>=
ggplot(diamonds, aes(x=carat, y=price)) +
  geom_point(alpha=.2) + 
  scale_x_log10() + 
  scale_y_log10() + 
  geom_smooth(method="lm") + 
  ggtitle("Diamonds")
@

\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge: ggplot2}


\wwtd{What will this plot look like? Try drawing it (on paper) if you can.}
<< >>=
ggplot(diamonds, aes(x=price, fill=cut, color=cut)) + 
  geom_density(alpha=.4) + 
  labs(y=NULL)
@

\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Test your knowledge: ggplot2}


\wwtd{What will this plot look like? Try drawing it (on paper) if you can.}
<< >>=
ggplot(diamonds, aes(x=price, fill=cut, color=cut)) + 
  geom_density(alpha=.4) + 
  labs(y=NULL) + 
  facet_wrap(~ color)
@

\end{frame}
% ------------------------------------------------------------
% -------------------------------------------------------------
\begin{frame}[fragile]{Key ideas from this section}

\keyidea{ggplot() and aes() set up what data will get plotted. Then you tell it how to plot with geoms.}
\keyidea{You should have your data manipulation (e.g. getting summary stats) done before you try to get ggplot to plot it.}
\keyidea{ggplot works with layers, and you can add as many layers as you like.}

\end{frame}
% -------------------------------------------------------------

\end{document}